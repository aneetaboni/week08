name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'week08aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'week08-rg'

env:
  # e.g. week08acr.azurecr.io (set as repo secret)
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing

      - name: Attach ACR (idempotent; prevents ImagePull errors)
        shell: bash
        run: |
          ACR_NAME="${{ env.ACR_LOGIN_SERVER%%.* }}"   # -> week08acr
          echo "Attaching ACR '$ACR_NAME' to AKS '${{ github.event.inputs.aks_cluster_name }}'..."
          az aks update \
            -g "${{ github.event.inputs.aks_resource_group }}" \
            -n "${{ github.event.inputs.aks_cluster_name }}" \
            --attach-acr "$ACR_NAME" \
          || echo "attach-acr skipped or already attached"

      # --- Choose ONE of the next two blocks ---
      # A) If your manifests are under k8s/ (your current script assumes this)
      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      # B) If your manifests live at the repo root, use this instead of A)
      # - name: Deploy Backend (root-level manifests)
      #   run: |
      #     kubectl apply -f configmaps.yaml
      #     kubectl apply -f secrets.yaml
      #     kubectl apply -f product-db.yaml
      #     kubectl apply -f order-db.yaml
      #     kubectl apply -f product-service.yaml
      #     kubectl apply -f order-service.yaml

      - name: Wait for Backend LoadBalancer IPs (or hostnames)
        id: wait_ips
        shell: bash
        run: |
          get_ingress () {
            local svc="$1"
            # Prefer IP, fallback to hostname
            local v
            v="$(kubectl get svc "$svc" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)"
            if [ -z "$v" ]; then
              v="$(kubectl get svc "$svc" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)"
            fi
            echo "$v"
          }

          echo "Waiting (up to 5 minutes) for LoadBalancer ingress..."
          for i in $(seq 1 60); do
            PRODUCT="$(get_ingress product-service-w08e1)"
            ORDER="$(get_ingress order-service-w08e1)"
            echo "Attempt $i/60 â†’ Product: ${PRODUCT:-<pending>}  Order: ${ORDER:-<pending>}"
            if [ -n "$PRODUCT" ] && [ -n "$ORDER" ]; then
              break
            fi
            sleep 5
          done

          if [ -z "$PRODUCT" ] || [ -z "$ORDER" ]; then
            echo "Error: One or both LoadBalancer ingress values not assigned within timeout."
            kubectl get svc -o wide
            exit 1
          fi

          echo "PRODUCT_IP=$PRODUCT" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER"     >> $GITHUB_ENV
          echo "product_ingress=$PRODUCT" >> $GITHUB_OUTPUT
          echo "order_ingress=$ORDER"     >> $GITHUB_OUTPUT

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Show services
        run: kubectl get svc -o wide

      - name: Logout from Azure
        if: always()
        run: az logout
